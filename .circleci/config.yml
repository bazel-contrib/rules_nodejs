# Configuration file for https://circleci.com/gh/bazelbuild/rules_nodejs

# Note: YAML anchors allow an object to be re-used, reducing duplication.
# The ampersand declares an alias for an object, then later the `<<: *name`
# syntax dereferences it.
# See http://blog.daemonl.com/2016/02/yaml.html
# To validate changes, use an online parser, eg.
# http://yaml-online-parser.appspot.com/

## IMPORTANT
# If you change the `docker_image` version, also change the `cache_key` version
var_1: &docker_image angular/ngcontainer:0.3.1
var_2: &cache_key angular/ngcontainer:0.3.1-{{ .Branch }}-{{ checksum "yarn.lock" }}-examples/rollup:{{ checksum "examples/rollup/yarn.lock" }}-examples/program:{{ checksum "examples/program/yarn.lock" }}-internal/test:{{ checksum "internal/test/yarn.lock" }}-internal/e2e/node_loader_no_preserve_symlinks:{{ checksum "internal/e2e/node_loader_no_preserve_symlinks/yarn.lock" }}-internal/e2e/node_loader_preserve_symlinks:{{ checksum "internal/e2e/node_loader_preserve_symlinks/yarn.lock" }}
var_3: &setup-bazel-remote-cache
  run:
    name: Start up bazel remote cache proxy
    command: ~/bazel-remote-proxy -backend circleci://
    background: true
# Move node binaries out of the way to enforce that Bazel uses
# only the hermetic ones it downloads
var_4: &hide_node_and_yarn_local_binaries
  run:
    name: Move node, npm, and yarn binaries
    command: |
      sudo mv /usr/local/bin/node /usr/local/bin/node_
      sudo mv /usr/local/bin/npm /usr/local/bin/npm_
      sudo mv /usr/local/bin/yarn /usr/local/bin/yarn_

# Settings common to each job
anchor_1: &job_defaults
  working_directory: ~/ng
  docker:
    - image: *docker_image

# After checkout, rebase on top of master.
# Similar to travis behavior, but not quite the same.
# See https://discuss.circleci.com/t/1662
anchor_2: &post_checkout
  post: git pull --ff-only origin "refs/pull/${CI_PULL_REQUEST//*pull\//}/merge"

# Opt-in to the new goodness
version: 2

# These jobs will run in parallel, and report separate statuses to GitHub PRs
jobs:
  lint:
    <<: *job_defaults
    steps:
      - checkout:
          <<: *post_checkout
      - run: .circleci/setup_cache.sh
      - run: sudo cp .circleci/bazel.rc /etc/bazel.bazelrc
      - *setup-bazel-remote-cache

      # Run the skylark linter to check our Bazel rules
      # deprecated-api is disabled because we legacy providers for typescript
      # which cannot be upgraded to modern providers without breaking compatability
      - run: 'find . -type f -name "*.bzl" |
              xargs java -jar /usr/local/bin/Skylint_deploy.jar --disable-checks=deprecated-api ||
              (echo -e "\n.bzl files have lint errors. Please run ''yarn skylint''"; exit 1)'

      # Enforce that BUILD files are formatted. Note that this uses the version of buildifier
      # from the docker image above - take care that you use the same version when you run
      # buildifier locally on your change.
      - run: 'buildifier -mode=check $(find . -type f \( -name BUILD.bazel -or -name BUILD \)) ||
              (echo "BUILD files not formatted. Please run ''yarn buildifier''" ; exit 1)'

  build:
    <<: *job_defaults
    steps:
      - checkout:
          <<: *post_checkout
      - run: .circleci/setup_cache.sh
      - run: sudo cp .circleci/bazel.rc /etc/bazel.bazelrc
      - *setup-bazel-remote-cache
      - *hide_node_and_yarn_local_binaries
      - restore_cache:
          key: *cache_key

      - run: bazel info release

      - run: bazel run @nodejs//:yarn
      - run: bazel build ...
      - run: bazel test ...
      # TODO(alexeagle): move this into the example proper
      - run: bazel run examples/rollup -- --help

      # These targets should run
      - run: bazel run //internal/node/test:no_deps
      - run: bazel run //internal/node/test:has_deps_legacy
      - run: bazel run //internal/node/test:has_deps
      - run: bazel run //internal/node/test:has_deps_hybrid

      # We should also be able to test targets in a different workspace
      - run: bazel test @program_example//...
      - run: bazel test @packages_example//...

      - save_cache:
          key: *cache_key
          paths:
            - "node_modules"
            - "examples/rollup/node_modules"
            - "examples/program/node_modules"
            - "internal/e2e/node_loader_no_preserve_symlinks/node_modules"
            - "internal/e2e/node_loader_preserve_symlinks/node_modules"
            - "internal/test/node_modules"

  test:
    <<: *job_defaults
    steps:
      - checkout:
          <<: *post_checkout
      - run: .circleci/setup_cache.sh
      - run: sudo cp .circleci/bazel.rc /etc/bazel.bazelrc
      - *setup-bazel-remote-cache

      # Not using "bazel run @nodejs//:yarn test" as will attempt to run
      # the "test" script on all folder listed in node_repositories()
      - run: yarn test

workflows:
  version: 2
  default_workflow:
    jobs:
      - lint
      - build
      - test

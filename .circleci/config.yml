# Configuration file for https://circleci.com/gh/bazelbuild/rules_nodejs

# Note: YAML anchors allow an object to be re-used, reducing duplication.
# The ampersand declares an alias for an object, then later the `<<: *name`
# syntax dereferences it.
# See http://blog.daemonl.com/2016/02/yaml.html
# To validate changes, use an online parser, eg.
# http://yaml-online-parser.appspot.com/

## IMPORTANT
# If you change the `default_docker_image` version, also change the `cache_key` version
var_1: &default_docker_image circleci/node:10.14
var_2: &browsers_docker_image circleci/node:10.14-browsers
var_3: &cache_key node-0.14-{{ checksum "yarn.lock" }}-{{ checksum "examples/program/yarn.lock" }}

var_4: &init_environment
  run:
    name: Initializing environment (setting up variables, overwriting Yarn)
    command: |
      # Setup circleci environment
      ./.circleci/env.sh

      # Overwrite the yarn installed in the docker container with our own version.
      pathToYarn=$(realpath ./third_party/github.com/yarnpkg/yarn/releases/download/v1.13.0/bin/yarn.js)
      sudo chmod a+x $pathToYarn
      sudo ln -fs $pathToYarn /usr/local/bin/yarn
      echo "Yarn version: $(yarn --version)"

      # Add GitHub to known hosts.
      mkdir -p ~/.ssh
      echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts

      # Use git+ssh instead of https
      git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true
      git config --global gc.auto 0 || true

      # Setup /etc/bazel.bazelrc
      sudo cp .circleci/bazel.rc /etc/bazel.bazelrc

var_5: &yarn_install
  run:
    name: Run yarn install
    command: yarn install

var_6: &init_bazel
  run:
    name: Initializing Bazel
    command: |
      # Symlink fetched bazel to /usr/local/bin/bazel
      pathToBazel=$(ls $(realpath ./node_modules/@bazel/bazel-linux_x64)/bazel-*)
      sudo ln -fs $pathToBazel /usr/local/bin/bazel
      echo "Bazel version:"
      bazel version

var_7: &hide_node_and_yarn_local_binaries
  run:
    name: Hide node, npm, and yarn binaries
    command: |
      # Hide node binaries to enforce that Bazel uses only the hermetic ones it downloads
      sudo mv /usr/local/bin/node /usr/local/bin/node_
      sudo mv /usr/local/bin/npm /usr/local/bin/npm_
      sudo mv /usr/local/bin/yarn /usr/local/bin/yarn_

var_8: &use_legacy_runfiles
  run:
    name: Use legacy runfiles
    command: |
      echo 'run --legacy_external_runfiles' >> .bazelrc
      echo 'test --legacy_external_runfiles' >> .bazelrc

var_9: &job_defaults
  working_directory: ~/rules_nodejs
  docker:
    - image: *default_docker_image

var_10: &restore_cache
  restore_cache:
    keys:
      - *cache_key

var_8: &attach_workspace
  attach_workspace:
    at: ~/

# Opt-in to the new goodness
version: 2

# These jobs will run in parallel, and report separate statuses to GitHub PRs
jobs:
  setup:
    <<: *job_defaults
    steps:
      - checkout
      - *restore_cache
      - *init_environment
      - *yarn_install
      - *init_bazel

      # Run yarn on all node_repositories
      - run: bazel run @nodejs//:yarn

      # Save all node_modules to the cache
      - save_cache:
          key: *cache_key
          paths:
            - "node_modules"
            - "examples/program/node_modules"

      # Persist any changes at this point to be reused by further jobs.
      - persist_to_workspace:
          root: ~/
          paths:
            - ./rules_nodejs

  # Cannot be run on BuildKite (BazelCI), see
  # https://github.com/bazelbuild/continuous-integration/issues/338
  lint:
    <<: *job_defaults
    steps:
      - *attach_workspace
      - *init_environment
      - *init_bazel

      # Run the Buildifier to check our Bazel rules for format issues.
      - run: 'yarn bazel:format-check ||
              (echo "BUILD files not formatted. Please run ''yarn bazel:format --mode=fix''" ; exit 1)'

      # Run the Buildifier to check our Bazel rules for lint issues.
      # Note: The `--lint=warn` will auto fixe (re-write) the affected files. 
      - run: 'yarn bazel:lint ||
              (echo "BUILD files contain unresolved lint errors. Please fix manually the remaining errors." ; exit 1)'

  # Overlaps with testing we do on BuildKite. This is still here because:
  # - BuildKite doesn't have a public results UI; failures here let contributors fix their changes
  # - We hide the node,yarn,npm binaries here which we don't do on BuildKite
  # TODO: port these assertions to BuildKite
  test:
    <<: *job_defaults
    resource_class: xlarge
    steps:
      - *attach_workspace
      - *init_environment
      - *init_bazel
      - *hide_node_and_yarn_local_binaries

      - run: bazel build ...
      - run: bazel test ...

  runnable_targets:
    <<: *job_defaults
    steps:
      - *attach_workspace
      - *init_environment
      - *init_bazel
      - *hide_node_and_yarn_local_binaries

      # These targets should run
      - run: bazel run //internal/node/test:no_deps
      - run: bazel run //internal/node/test:has_deps_legacy
      - run: bazel run //internal/node/test:has_deps
      - run: bazel run //internal/node/test:has_deps_hybrid
      - run: bazel run //internal/node/test:module_name_test
      - run: bazel run //internal/e2e/fine_grained_no_bin:index
      - run: bazel run @fine_grained_deps_yarn//typescript/bin:tsc
      - run: bazel run @bazel_workspace_a//:bin
      - run: bazel run @bazel_workspace_a//subdir:bin
      - run: bazel run @bazel_workspace_b//:bin
      - run: bazel run @bazel_workspace_b//subdir:bin

  test_legacy_runfiles:
    <<: *job_defaults
    steps:
      - *attach_workspace
      - *init_environment
      - *use_legacy_runfiles
      - *init_bazel
      - *hide_node_and_yarn_local_binaries

      # We should also be able to test targets in a different workspace
      # TODO(gmagolan): move these tests into `build` job once
      # https://github.com/bazelbuild/bazel/issues/6481 is resolved
      - run: bazel test @examples_program//...
      - run: bazel test @internal_e2e_packages//...

  build_release:
    <<: *job_defaults
    steps:
      - *attach_workspace
      - *init_environment
      - *init_bazel
      - *hide_node_and_yarn_local_binaries
      - run: ./scripts/build_release.sh
      - persist_to_workspace:
          root: ~/
          paths:
            - ./rules_nodejs/dist/build_bazel_rules_nodejs

  build_typescript_package:
    <<: *job_defaults
    # Need to compile Go and protocol buffers from source for typescript package
    resource_class: xlarge
    steps:
      - *attach_workspace
      - *init_environment
      - *init_bazel
      - *hide_node_and_yarn_local_binaries
      - run: ./scripts/build_packages.sh typescript
      - persist_to_workspace:
          root: ~/
          paths:
            - ./rules_nodejs/dist/npm_bazel_typescript

  build_karma_package:
    <<: *job_defaults
    steps:
      - *attach_workspace
      - *init_environment
      - *init_bazel
      - *hide_node_and_yarn_local_binaries
      - run: ./scripts/build_packages.sh karma
      - persist_to_workspace:
          root: ~/
          paths:
            - ./rules_nodejs/dist/npm_bazel_karma

  build_jasmine_package:
    <<: *job_defaults
    steps:
      - *attach_workspace
      - *init_environment
      - *init_bazel
      - *hide_node_and_yarn_local_binaries
      - run: ./scripts/build_packages.sh jasmine
      - persist_to_workspace:
          root: ~/
          paths:
            - ./rules_nodejs/dist/npm_bazel_jasmine

  build_labs_package:
    <<: *job_defaults
    steps:
      - *attach_workspace
      - *init_environment
      - *init_bazel
      - *hide_node_and_yarn_local_binaries
      - run: ./scripts/build_packages.sh labs
      - persist_to_workspace:
          root: ~/
          paths:
            - ./rules_nodejs/dist/npm_bazel_labs

  test_packages:
    <<: *job_defaults
    # Need to compile Go and protocol buffers from source for typescript package
    resource_class: xlarge
    parallelism: 4
    steps:
      - *attach_workspace
      - *init_environment
      - *init_bazel
      - run: ./scripts/test_packages_all.sh ${CIRCLE_NODE_INDEX} ${CIRCLE_NODE_TOTAL}

  # This job cannot run on BuildKite (BazelCI) because it requires changing
  # directories to test inside nested workspaces.
  # See https://github.com/bazelbuild/continuous-integration/issues/225
  test_e2e:
    <<: *job_defaults
    docker:
      # Needed because some tests require local chrome
      - image: *browsers_docker_image
    resource_class: xlarge
    parallelism: 4
    steps:
      - *attach_workspace
      - *init_environment
      - *init_bazel
      # Some e2e tests such as ts_devserver require xvfb
      - run: xvfb-run -a ./scripts/test_e2e_all.sh ${CIRCLE_NODE_INDEX} ${CIRCLE_NODE_TOTAL}

  # These e2e tests are in the process of being moved to the test_e2e job
  test_e2e_legacy:
    <<: *job_defaults
    parallelism: 2
    steps:
      - *attach_workspace
      - *init_environment
      - *init_bazel
      - run: ./scripts/test_legacy_e2e_all.sh ${CIRCLE_NODE_INDEX} ${CIRCLE_NODE_TOTAL}

  # This job cannot run on BuildKite (BazelCI) because it requires changing
  # directories to test inside nested workspaces.
  # See https://github.com/bazelbuild/continuous-integration/issues/225
  test_examples:
    <<: *job_defaults
    docker:
      # Needed because some tests require local chrome
      - image: *browsers_docker_image
    resource_class: xlarge
    parallelism: 4
    steps:
      - *attach_workspace
      - *init_environment
      - *init_bazel
      # Some examples such as app require xvfb
      - run: xvfb-run -a ./scripts/test_examples_all.sh ${CIRCLE_NODE_INDEX} ${CIRCLE_NODE_TOTAL}

  # This job cannot run on BuildKite (BazelCI) because it requires changing
  # directories to test inside nested workspaces.
  # See https://github.com/bazelbuild/continuous-integration/issues/225
  test_angular_bazel_example:
    <<: *job_defaults
    docker:
      # Needed because some tests require local chrome
      - image: *browsers_docker_image
    resource_class: xlarge
    steps:
      - *attach_workspace
      - *init_environment
      - *init_bazel
      - run: ./scripts/setup_examples_angular.sh
      - run:
          name: Test angular-bazel-example
          command: |
            cd ./examples/angular
            # Install Bazel from NPM
            yarn
            # Build and Test
            yarn ng test
            yarn ng e2e
            # Also run prodserver test which is not covered by `ng e2e`
            yarn bazel test //e2e:prodserver_test

workflows:
  version: 2
  default_workflow:
    jobs:
      - setup
      - lint:
          requires:
          - setup
      - test:
          requires:
          - setup
      - runnable_targets:
          requires:
          - setup
      - test_legacy_runfiles:
          requires:
          - setup
      - build_release:
          requires:
          - setup
      - build_jasmine_package:
          requires:
          - setup
      - build_karma_package:
          requires:
          # karma package depends on typescript package
          - build_typescript_package
      - build_labs_package:
          requires:
          - build_typescript_package
      - build_typescript_package:
          requires:
          # typescript package depends on jasmine package
          - build_jasmine_package
      - test_packages:
          requires:
          - build_typescript_package
      - test_e2e:
          requires:
          - build_release
          - build_typescript_package
          - build_jasmine_package
          - build_labs_package
          - build_karma_package
      - test_e2e_legacy:
          requires:
          - build_release
      - test_examples:
          requires:
          - build_release
          - build_typescript_package
          - build_jasmine_package
          - build_labs_package
          - build_karma_package
      - test_angular_bazel_example:
          requires:
          - build_release
          - build_typescript_package
          - build_jasmine_package
          - build_labs_package
          - build_karma_package

const { readFileSync } = require('fs');
const md = process.argv[2];
const title = process.argv[3];
const content = readFileSync(md, {encoding: 'utf8'});

// it seems more natural for devs to author with markdown, but the docs are generated into stardoc with HTML tables,
// so we have to replace a single backtick with a <code></code> block, and a code fence ``` with
// the Jekyll highlighter syntax
const out = content
  .replace(/(?<!`)`([^`]+)`(?!`)/g, `<code>$1</code>`)
  .replace(/```(\w*?)\n((?:(?!```)[\s\S])+)```/g, (str, lang, block) => {
    // if no lang is defined, assume Python, it's likely right and the param is required
    return `{% highlight ${lang ? lang.trim() : 'python'} %}\n${block}{% endhighlight %}`;
  });

// stamp the frontmatter into the post processed stardoc HTML
const frontmatter = [  
  '---',
  `title: ${title}`,
  'layout: default',
  'toc: true',
  'nav: rule',
  '---',
  '<!-- *********************',
  '  DO NOT EDIT THIS FILE',
  '  It is a generated build output from Stardoc.',
  '  Instead you must edit the .bzl file where the rules are declared,',
  '  or possibly a markdown file next to the .bzl file',
  ' ********************* -->\n'
].join('\n');

// write out to stdout, this script is run as part of a genrule that redirects the output the to expected file
process.stdout.write(frontmatter + out);

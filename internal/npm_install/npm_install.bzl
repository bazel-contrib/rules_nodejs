# Copyright 2017 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Install npm packages

Rules to install NodeJS dependencies during WORKSPACE evaluation.
This happens before the first build or test runs, allowing you to use Bazel
as the package manager.

See discussion in the README.
"""

load("//internal/node:node_labels.bzl", "get_node_label", "get_npm_label")

def _create_build_file(repository_ctx):
  repository_ctx.file("BUILD", """
package(default_visibility = ["//visibility:public"])
filegroup(
    name = "node_modules",
    srcs = glob(["node_modules/**/*"],
        # Exclude directories that commonly contain filenames which are
        # illegal bazel labels
        exclude = [
            # e.g. node_modules/adm-zip/test/assets/attributes_test/New folder/hidden.txt
            "node_modules/**/test/**",
            # e.g. node_modules/xpath/docs/function resolvers.md
            "node_modules/**/docs/**",
            # e.g. node_modules/puppeteer/.local-chromium/mac-536395/chrome-mac/Chromium.app/Contents/Versions/66.0.3347.0/Chromium Framework.framework/Chromium Framework
            "node_modules/**/.*/**"
        ],
    ),
)
""")

def _add_data_dependencies(repository_ctx):
  """Add data dependencies to the repository."""
  for f in repository_ctx.attr.data:
    to = []
    if f.package:
      to += [f.package]
    to += [f.name]
    repository_ctx.symlink(f, repository_ctx.path("/".join(to)))

def _npm_install_impl(repository_ctx):
  """Core implementation of npm_install."""

  _create_build_file(repository_ctx)

  # Put our package descriptors in the right place.
  repository_ctx.symlink(
      repository_ctx.attr.package_json,
      repository_ctx.path("package.json"))
  if repository_ctx.attr.package_lock_json:
      repository_ctx.symlink(
          repository_ctx.attr.package_lock_json,
          repository_ctx.path("package-lock.json"))

  _add_data_dependencies(repository_ctx)

  node = get_node_label(repository_ctx)
  npm = get_npm_label(repository_ctx)

  # This runs node, not npm directly, as the latter will
  # use #!/usr/bin/node (see https://github.com/bazelbuild/rules_nodejs/issues/77)
  # To see the output, pass: quiet=False
  # --scripts-prepend-node-path=true is added so that any child npm processes use the
  # correct node binary (see https://github.com/bazelbuild/rules_nodejs/issues/151)
  result = repository_ctx.execute(
    [repository_ctx.path(node), repository_ctx.path(npm), "install", "--scripts-prepend-node-path=true", repository_ctx.path("")])

  if not repository_ctx.attr.package_lock_json:
    print("\n***********WARNING***********\n%s: npm_install will require a package_lock_json attribute in future versions\n*****************************" % repository_ctx.name)

  if result.return_code:
    fail("npm_install failed: %s (%s)" % (result.stdout, result.stderr))

  remove_npm_absolute_paths = Label("@build_bazel_rules_nodejs_npm_install_deps//:node_modules/removeNPMAbsolutePaths/bin/removeNPMAbsolutePaths")

  # removeNPMAbsolutePaths is run on node_modules after npm install as the package.json files
  # generated by npm are non-deterministic. They contain absolute install paths and other private
  # information fields starting with "_". removeNPMAbsolutePaths removes all fields starting with "_".
  result = repository_ctx.execute(
    [repository_ctx.path(node), repository_ctx.path(remove_npm_absolute_paths), repository_ctx.path("")])

  if result.return_code:
    fail("remove_npm_absolute_paths failed: %s (%s)" % (result.stdout, result.stderr))

npm_install = repository_rule(
    attrs = {
        "package_json": attr.label(
            allow_files = True,
            mandatory = True,
            single_file = True,
        ),
        "package_lock_json": attr.label(
            allow_files = True,
            single_file = True,
        ),
        "data": attr.label_list(),
    },
    implementation = _npm_install_impl,
)
"""Runs npm install during workspace setup.
"""

def _yarn_install_impl(repository_ctx):
  """Core implementation of yarn_install."""

  _create_build_file(repository_ctx)

  # Put our package descriptors in the right place.
  repository_ctx.symlink(
      repository_ctx.attr.package_json,
      repository_ctx.path("package.json"))
  if repository_ctx.attr.yarn_lock:
      repository_ctx.symlink(
          repository_ctx.attr.yarn_lock,
          repository_ctx.path("yarn.lock"))

  _add_data_dependencies(repository_ctx)

  node = get_node_label(repository_ctx)

  # Use @yarn//:yarn.js, which adds node to the path before calling @yarn//:bin/yarn.js
  yarn = Label("@yarn//:yarn.js")

  # This runs node, not yarn directly, as the latter will
  # look for a local node install (related to https://github.com/bazelbuild/rules_nodejs/issues/77).
  # A local cache is used as multiple yarn rules cannot run simultaneously using a shared
  # cache and a shared cache is non-hermetic.
  # To see the output, pass: quiet=False
  result = repository_ctx.execute([
    repository_ctx.path(node),
    repository_ctx.path(yarn),
    "--cache-folder",
    repository_ctx.path("_yarn_cache"),
    "--cwd",
    repository_ctx.path("")])

  if result.return_code:
    fail("yarn_install failed: %s (%s)" % (result.stdout, result.stderr))

yarn_install = repository_rule(
    attrs = {
        "package_json": attr.label(
            allow_files = True,
            mandatory = True,
            single_file = True,
        ),
        "yarn_lock": attr.label(
            allow_files = True,
            mandatory = True,
            single_file = True,
        ),
        "data": attr.label_list(),
    },
    implementation = _yarn_install_impl,
)
"""Runs yarn install during workspace setup.
"""
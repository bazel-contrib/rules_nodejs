"""Helper function and aspect to collect first-party packages.

These are used in node rules to link the node_modules before launching a program.
This supports path re-mapping, to support short module names.
See pathMapping doc: https://github.com/Microsoft/TypeScript/issues/5039

This reads the module_root and module_name attributes from rules in
the transitive closure, rolling these up to provide a mapping to the
linker, which uses the mappings to link a node_modules directory for
runtimes to locate all the first-party packages.
"""

# Can't load from //:providers.bzl directly as that introduces a circular dep
load("//internal/providers:external_npm_package_info.bzl", "ExternalNpmPackageInfo")
load("//internal/providers:linkable_package_info.bzl", "LinkablePackageInfo")

def _debug(vars, *args):
    if "VERBOSE_LOGS" in vars.keys():
        print("[link_node_modules.bzl]", *args)

# Arbitrary name; must be chosen to globally avoid conflicts with any other aspect
MODULE_MAPPINGS_ASPECT_RESULTS_NAME = "link_node_modules__aspect_result"

# Traverse 'srcs' in addition so that we can go across a genrule
_MODULE_MAPPINGS_DEPS_NAMES = ["data", "deps", "srcs"]

def add_arg(args, arg):
    """Add an argument

    Args:
        args: either a list or a ctx.actions.Args object
        arg: string arg to append on the end
    """
    if (type(args) == type([])):
        args.append(arg)
    else:
        args.add(arg)

def _link_mapping(label, mappings, k, v):
    # Check that two package name mapping do not map to two different source paths
    package_name = k.split(":")[0]
    source_path = v[1]

    # Special case for ts_library module_name for legacy behavior and for AMD name work-around
    # Mapping is tagged as "__tslibrary__".
    # See longer comment below in _get_module_mappings for more details.
    if v[0] != "__tslibrary__":
        for iter_key, iter_values in mappings.items():
            # Map key is of format "package_name:package_path"
            # Map values are of format [deprecated, source_path]
            iter_package_name = iter_key.split(":")[0]
            iter_source_path = iter_values[1]
            if iter_values[0] != "__tslibrary__" and package_name == iter_package_name and source_path != iter_source_path:
                fail("conflicting mapping at '%s': '%s' and '%s' map to conflicting %s and %s" % (label, k, iter_key, source_path, iter_source_path))

    # Allow __tslibrary__ special case to be overridden other matching mappings
    if k in mappings and mappings[k] != v:
        if mappings[k][0] == "__tslibrary__":
            return True
        elif v[0] == "__tslibrary__":
            return False
        fail(("conflicting mapping at '%s': '%s' maps to both %s and %s" % (label, k, mappings[k], v)), "deps")
    else:
        return True

def write_node_modules_manifest(ctx, extra_data = [], mnemonic = None, link_workspace_root = False):
    """Writes a manifest file read by the linker, containing info about resolving runtime dependencies

    Args:
        ctx: starlark rule execution context
        extra_data: labels to search for npm packages that need to be linked (ctx.attr.deps and ctx.attr.data will always be searched)
        mnemonic: optional action mnemonic, used to differentiate module mapping files from the same rule context
        link_workspace_root: Link the workspace root to the bin_dir to support absolute requires like 'my_wksp/path/to/file'.
            If source files need to be required then they can be copied to the bin_dir with copy_to_bin.
    """

    mappings = {ctx.workspace_name: ["__link__", ctx.bin_dir.path]} if link_workspace_root else {}
    node_modules_roots = {}

    # Look through data/deps attributes to find the root directories for the third-party node_modules;
    # we'll symlink local "node_modules" to them
    for dep in extra_data + getattr(ctx.attr, "data", []) + getattr(ctx.attr, "deps", []):
        if ExternalNpmPackageInfo in dep:
            path = dep[ExternalNpmPackageInfo].path
            workspace = dep[ExternalNpmPackageInfo].workspace
            if path in node_modules_roots:
                other_workspace = node_modules_roots[path]
                if workspace != other_workspace:
                    fail("All npm dependencies at the path '%s' must come from a single workspace. Found '%s' and '%s'." % (path, other_workspace, workspace))
            node_modules_roots[path] = workspace

    # Look through data/deps attributes to find first party deps to link
    for dep in extra_data + getattr(ctx.attr, "data", []) + getattr(ctx.attr, "deps", []):
        for k, v in getattr(dep, MODULE_MAPPINGS_ASPECT_RESULTS_NAME, {}).items():
            map_key_split = k.split(":")
            package_name = map_key_split[0]
            package_path = map_key_split[1] if len(map_key_split) > 1 else ""
            if package_path not in node_modules_roots:
                node_modules_roots[package_path] = ""
            if _link_mapping(dep.label, mappings, k, v):
                _debug(ctx.var, "Linking %s: %s" % (k, v))
                mappings[k] = v

    # Convert mappings to a module sets (modules per package package_path)
    # {
    #     "package_path": {
    #             "package_name": "source_path",
    #             ...
    #     },
    #     ...
    # }
    module_sets = {}
    for k, v in mappings.items():
        map_key_split = k.split(":")
        package_name = map_key_split[0]
        package_path = map_key_split[1] if len(map_key_split) > 1 else ""
        source_path = v[1]
        if package_path not in module_sets:
            module_sets[package_path] = {}
        module_sets[package_path][package_name] = source_path

    # Write the result to a file, and use the magic node option --bazel_node_modules_manifest
    # The launcher.sh will peel off this argument and pass it to the linker rather than the program.
    prefix = ctx.label.name
    if mnemonic != None:
        prefix += "_%s" % mnemonic
    modules_manifest = ctx.actions.declare_file("_%s.module_mappings.json" % prefix)
    content = {
        "bin": ctx.bin_dir.path,
        "module_sets": module_sets,
        "roots": node_modules_roots,
        "workspace": ctx.workspace_name,
    }
    ctx.actions.write(modules_manifest, str(content))
    return modules_manifest

def _get_module_mappings(target, ctx):
    """Returns the module_mappings from the given attrs.

    Collects a {module_name - module_root} hash from all transitive dependencies,
    checking for collisions. If a module has a non-empty `module_root` attribute,
    all sources underneath it are treated as if they were rooted at a folder
    `module_name`.

    Args:
      target: target
      ctx: ctx

    Returns:
      The module mappings
    """
    mappings = {}

    # Propogate transitive mappings
    for name in _MODULE_MAPPINGS_DEPS_NAMES:
        for dep in getattr(ctx.rule.attr, name, []):
            for k, v in getattr(dep, MODULE_MAPPINGS_ASPECT_RESULTS_NAME, {}).items():
                if _link_mapping(target.label, mappings, k, v):
                    _debug(ctx.var, "target %s propagating module mapping %s: %s" % (dep.label, k, v))
                    mappings[k] = v

    # Look for LinkablePackageInfo mapping in this node
    if not LinkablePackageInfo in target:
        # No mappings contributed here, short-circuit with the transitive ones we collected
        _debug(ctx.var, "No LinkablePackageInfo for", target.label)
        return mappings

    # LinkablePackageInfo may be provided without a package_name so check for that case as well
    if not target[LinkablePackageInfo].package_name:
        # No mappings contributed here, short-circuit with the transitive ones we collected
        _debug(ctx.var, "No package_name in LinkablePackageInfo for", target.label)
        return mappings

    linkable_package_info = target[LinkablePackageInfo]

    if hasattr(linkable_package_info, "package_path") and linkable_package_info.package_path:
        mn = "%s:%s" % (linkable_package_info.package_name, linkable_package_info.package_path)
    else:
        # legacy (root linked) style mapping
        # TODO(4.0): remove this else condition and always use "%s:%s" style
        mn = linkable_package_info.package_name
    mr = ["__link__", linkable_package_info.path]

    # Special case for ts_library module_name for legacy behavior and for AMD name work-around
    # Tag the mapping as "__tslibrary__" so it can be overridden by any other mapping if found.
    #
    # In short, ts_library module_name attribute results in both setting the AMD name (which
    # desired and necessary in devmode which outputs UMD) and in making a linkable mapping. Because
    # of this, you can get in the situation where a ts_library module_name and a downstream pkg_name
    # package_name conflict and result in duplicate mappings. This work-around will make this
    # situation work however it is not a recommended pattern since a ts_library can be a dep of a
    # pkg_npm but not vice-verse at the moment since ts_library cannot handle directory artifacts as
    # deps.
    #
    # TODO(4.0): In a future major release, ts_library will get a package_name attribute to enable the linker
    # and the __tslibrary__ special case can be factored out.
    # This is planned for 4.0: https://github.com/bazelbuild/rules_nodejs/issues/2450.
    if hasattr(linkable_package_info, "_tslibrary") and linkable_package_info._tslibrary:
        mr[0] = "__tslibrary__"

    if _link_mapping(target.label, mappings, mn, mr):
        _debug(ctx.var, "target %s adding module mapping %s: %s" % (target.label, mn, mr))
        mappings[mn] = mr

    # Returns mappings of shape:
    # {
    #   "package_name": [legacy_tslibary_usage, source_path],
    #   "package_name:package_path": [legacy_tslibary_usage, source_path],
    #   ...
    # }
    # TODO(4.0): simplify to { "package_name:package_path": source_path, ... } once __tslibrary__ is no longer needed
    return mappings

def _module_mappings_aspect_impl(target, ctx):
    # Use a dictionary to construct the result struct
    # so that we can reference the MODULE_MAPPINGS_ASPECT_RESULTS_NAME variable
    return struct(**{
        MODULE_MAPPINGS_ASPECT_RESULTS_NAME: _get_module_mappings(target, ctx),
    })

module_mappings_aspect = aspect(
    _module_mappings_aspect_impl,
    attr_aspects = _MODULE_MAPPINGS_DEPS_NAMES,
)

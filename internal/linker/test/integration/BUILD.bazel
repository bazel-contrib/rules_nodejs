load("@build_bazel_rules_nodejs//internal/golden_file_test:golden_file_test.bzl", "golden_file_test")
load(":rule.bzl", "linked")

# Use the node binary supplied by the bazel toolchain
# Normally the nodejs_binary rule would do this,
# but we want to have a more minimal test fixture
genrule(
    name = "replace_node_path",
    srcs = [":run_program.sh"],
    outs = ["run_program_with_node.sh"],
    cmd = "sed s#NODE_PATH#$(NODE_PATH)# $< > $@",
    toolchains = ["@build_bazel_rules_nodejs//toolchains/node:toolchain"],
)

# Make our program executable and include the linker
# The runfiles here are only the ones included with the program itself
sh_binary(
    name = "some_program",
    srcs = ["some_program.sh"],
    data = [
        "//internal/linker/test/integration/transitive_static_linked_pkg",
    ],
)

# Make our program executable and include the linker
# The runfiles here are only the ones included with the program itself
sh_binary(
    name = "run_program",
    srcs = ["run_program_with_node.sh"],
    data = [
        ":program.js",
        # Include `:some_program` as a data dep  so we get the
        # transitive_static_linked_pkg "runfiles" mapping transitively. This test verifies that
        # `bazel-out/darwin-fastbuild/bin/internal/linker/test/integration/run_program.runfiles`
        # also contains the runfiles from
        # `bazel-out/darwin-fastbuild/bin/internal/linker/test/integration/some_program.runfiles`
        # as it has `:some_program` as a data dep and that the linker will correctly link
        # "runfiles" module mappings from `:some_program` in `:run_program` under the
        ":some_program",
        "//internal/linker:index.js",
        "//internal/linker/test/integration/static_linked_pkg",
        "//internal/linker/test/integration/static_linked_scoped_pkg",
        "@bazel_tools//tools/bash/runfiles",
        "@build_bazel_rules_nodejs//toolchains/node:node_bin",
    ],
)

# How a users rule might want to run a node program
linked(
    name = "example",
    out = "actual",
    program = ":run_program",
    deps = [
        # NB: reference the copy of index.js in the output folder
        "//%s/absolute_import:copy_to_bin" % package_name(),
        ":run_program",
        "//internal/linker/test/integration/dynamic_linked_pkg",
        "//internal/linker/test/integration/dynamic_linked_scoped_pkg",
        "@npm//semver",
    ],
)

golden_file_test(
    # default rule in this package
    name = "integration",
    actual = "actual",
    golden = "golden.txt",
)

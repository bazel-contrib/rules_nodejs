# Copyright 2017 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""js_library can be used to expose and share any library package.

DO NOT USE - this is not fully designed and work in progress.
"""

load(
    "@build_bazel_rules_nodejs//:providers.bzl",
    "LinkablePackageInfo",
    "NpmPackageInfo",
    "declaration_info",
    "js_module_info",
    "js_named_module_info",
)

_AMD_NAMES_DOC = """Mapping from require module names to global variables.
This allows devmode JS sources to load unnamed UMD bundles from third-party libraries."""

AmdNamesInfo = provider(
    doc = "provide access to the amd_names attribute of js_library",
    fields = {"names": _AMD_NAMES_DOC},
)

def write_amd_names_shim(actions, amd_names_shim, targets):
    """Shim AMD names for UMD bundles that were shipped anonymous.

    These are collected from our bootstrap deps (the only place global scripts should appear)

    Args:
      actions: skylark rule execution context.actions
      amd_names_shim: File where the shim is written
      targets: dependencies to be scanned for AmdNamesInfo providers
    """

    amd_names_shim_content = """// GENERATED by js_library.bzl
// Shim these global symbols which were defined by a bootstrap script
// so that they can be loaded with named require statements.
"""
    for t in targets:
        if AmdNamesInfo in t:
            for n in t[AmdNamesInfo].names.items():
                amd_names_shim_content += "define(\"%s\", function() { return %s });\n" % n
    actions.write(amd_names_shim, amd_names_shim_content)

def _impl(ctx):
    files = ctx.files.srcs + ctx.files.named_module_srcs
    typings = []
    js_files = []
    include_npm_package_info = False

    for file in files:
        if file.basename.endswith(".js") or file.basename.endswith(".js.map") or file.basename.endswith(".json"):
            js_files.append(file)
        if (
            (
                file.path.endswith(".d.ts") or
                file.path.endswith(".d.ts.map") or
                # package.json may be required to resolve "typings" key
                file.path.endswith("/package.json")
            ) and
            # exclude eg. external/npm/node_modules/protobufjs/node_modules/@types/node/index.d.ts
            # these would be duplicates of the typings provided directly in another dependency.
            # also exclude all /node_modules/typescript/lib/lib.*.d.ts files as these are determined by
            # the tsconfig "lib" attribute
            len(file.path.split("/node_modules/")) < 3 and file.path.find("/node_modules/typescript/lib/lib.") == -1
        ):
            typings.append(file)
        if file.is_source and file.path.startswith("external/"):
            # We cannot always expose the NpmPackageInfo as the linker
            # only allow us to reference node modules from a single workspace at a time.
            # Here we are automatically decide if we should or not including that provider
            # by running through the sources and check if we have a src coming from an external
            # workspace which indicates we should include the provider.
            include_npm_package_info = True

    files_depset = depset(files)
    js_files_depset = depset(js_files)
    named_module_srcs_depset = depset(ctx.files.named_module_srcs)
    typings_depset = depset(typings)
    sources_depsets = [files_depset]
    transitive_files_depsets = [files_depset]

    for dep in ctx.attr.deps:
        if NpmPackageInfo in dep:
            sources_depsets.append(dep[NpmPackageInfo].sources)
        elif DefaultInfo in dep:
            transitive_files_depsets.append(dep[DefaultInfo].files)

    transitive_sources = depset(transitive = sources_depsets)

    providers = [
        DefaultInfo(
            files = depset(transitive = transitive_files_depsets),
            runfiles = ctx.runfiles(
                files = files,
                transitive_files = depset(transitive = transitive_files_depsets),
            ),
        ),
        AmdNamesInfo(names = ctx.attr.amd_names),
        js_module_info(
            sources = js_files_depset,
            deps = ctx.attr.deps,
        ),
        js_named_module_info(
            sources = named_module_srcs_depset,
            deps = ctx.attr.deps,
        ),
    ]

    if ctx.attr.package_name:
        path = "/".join([p for p in [ctx.bin_dir.path, ctx.label.workspace_root, ctx.label.package] if p])
        providers.append(LinkablePackageInfo(
            package_name = ctx.attr.package_name,
            path = path,
            files = depset([
                files_depset,
                named_module_srcs_depset,
            ]),
        ))

    if include_npm_package_info:
        workspace_name = ctx.label.workspace_name if ctx.label.workspace_name else ctx.workspace_name
        providers.append(NpmPackageInfo(
            direct_sources = files_depset,
            sources = transitive_sources,
            workspace = workspace_name,
        ))

    # Don't provide DeclarationInfo if there are no typings to provide.
    # Improves error messaging downstream if DeclarationInfo is required.
    if len(typings):
        providers.append(declaration_info(
            declarations = typings_depset,
            deps = ctx.attr.deps,
        ))

    return providers

_js_library = rule(
    implementation = _impl,
    attrs = {
        "amd_names": attr.string_dict(
            doc = _AMD_NAMES_DOC,
        ),
        "deps": attr.label_list(
            doc = "Transitive dependencies of the package",
        ),
        # module_name for legacy ts_library module_mapping support
        # TODO: remove once legacy module_mapping is removed
        "module_name": attr.string(),
        "named_module_srcs": attr.label_list(
            doc = "A subset of srcs that are javascript named-UMD or named-AMD for use in rules such as ts_devserver",
            allow_files = True,
        ),
        "package_name": attr.string(
            doc = """Optional package_name that this package may be imported as.""",
        ),
        "srcs": attr.label_list(
            doc = "The list of files that comprise the package",
            allow_files = True,
        ),
    },
    doc = "Defines a js_library package",
)

def js_library(
        name,
        srcs = [],
        amd_names = {},
        package_name = None,
        deps = [],
        named_module_srcs = [],
        **kwargs):
    """Internal use only. May be published to the public API in a future release."""
    module_name = kwargs.pop("module_name", None)
    if module_name:
        fail("use package_name instead of module_name in target //%s:%s" % (native.package_name(), name))
    _js_library(
        name = name,
        srcs = srcs,
        deps = deps,
        named_module_srcs = named_module_srcs,
        amd_names = amd_names,
        package_name = package_name,
        # module_name for legacy ts_library module_mapping support
        # TODO: remove once legacy module_mapping is removed
        module_name = package_name,
        **kwargs
    )

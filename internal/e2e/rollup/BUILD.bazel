load("@build_bazel_rules_nodejs//:defs.bzl", "jasmine_node_test")
load("//:defs.bzl", "nodejs_binary", "rollup_bundle")

# The local package node_modules filegroup contains just one depenedency to test
# importing from a non-WORKSPACE-root node_modules folder. This makes it more clear
# that rollup_bundle doesn't resolve rollup/uglify from the users' npm dependencies.
filegroup(
    name = "node_modules",
    srcs = glob([
        "node_modules/**/*",
    ]),
    visibility = ["//internal:__subpackages__"],
)

rollup_bundle(
    name = "bundle_override",
    srcs = [
        "bar.js",
        "foo.js",
    ],
    entry_point = "internal/e2e/rollup/foo.js",
    globals = {"some_global_var": "runtime_name_of_global_var"},
    license_banner = ":license.txt",
    node_modules = ":node_modules",
    # These attributes can be used to override the default rollup setup/config
    rollup_config_entry_point = "build_bazel_rules_nodejs_rollup_deps/node_modules/rollup/bin/rollup",
    rollup_config_node_modules = "@build_bazel_rules_nodejs_rollup_deps//:node_modules",
    rollup_config_tmpl = "rollup.config.js",
    deps = ["//internal/e2e/rollup/fum:fumlib"],
)

rollup_bundle(
    name = "bundle",
    srcs = [
        "bar.js",
        "foo.js",
    ],
    entry_point = "internal/e2e/rollup/foo.js",
    globals = {"some_global_var": "runtime_name_of_global_var"},
    license_banner = ":license.txt",
    node_modules = ":node_modules",
    deps = ["//internal/e2e/rollup/fum:fumlib"],
)

jasmine_node_test(
    name = "test",
    srcs = ["rollup.spec.js"],
    data = glob([
        "golden/*",
    ]) + [
        ":bundle",
        ":bundle.umd.js",
        ":bundle.min_debug.js",
    ],
    node_modules = "//internal/test:node_modules",
)

jasmine_node_test(
    name = "test_override",
    srcs = ["rollup_override.spec.js"],
    data = glob([
        "golden_override/*",
    ]) + [
        ":bundle_override",
        ":bundle_override.umd.js",
        ":bundle_override.min_debug.js",
    ],
    node_modules = "//internal/test:node_modules",
)

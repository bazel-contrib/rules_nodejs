load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@build_bazel_rules_nodejs//:defs.bzl", "nodejs_binary")

package(default_visibility = ["//visibility:public"])

exports_files([
    "web_package.bzl",
    "inject_html.bzl",
])

bzl_library(
    name = "bzl",
    srcs = glob(["*.bzl"]),
    visibility = ["//visibility:public"],
)

filegroup(
    name = "node_modules_none",
)

nodejs_binary(
    name = "assembler",
    data = ["assembler.js"],
    entry_point = ":assembler.js",
    install_source_map_support = False,
    node_modules = ":node_modules_none",
)

nodejs_binary(
    name = "injector",
    data = [
        "injector.js",
        "//third_party/github.com/inikulin/parse5",
    ],
    entry_point = ":injector.js",
    install_source_map_support = False,
)

# BEGIN-INTERNAL
# TODO: switch to npm_bazel_jasmine
# buildozer: disable=load-on-top
# buildozer: disable=same-origin-load
load("@build_bazel_rules_nodejs//:defs.bzl", "jasmine_node_test")

jasmine_node_test(
    name = "injector_test",
    srcs = ["injector_spec.js"],
    deps = [
        ":injector.js",
        "//third_party/github.com/inikulin/parse5",
        "@npm//jasmine",
    ],
)

jasmine_node_test(
    name = "assembler_test",
    srcs = ["assembler_spec.js"],
    tags = [
        "fix-windows",
    ],
    deps = [
        "assembler.js",
        "@npm//jasmine",
    ],
)

# END-INTERNAL
filegroup(
    name = "package_contents",
    srcs = glob(
        ["*"],
        exclude = ["*_spec.js"],
    ),
)

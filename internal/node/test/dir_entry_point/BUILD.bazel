load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@rules_nodejs//nodejs/private:directory_file_path.bzl", "directory_file_path")
load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary", "pkg_npm")
load("@npm//typescript:index.bzl", "tsc")
load("//internal/common:assert.bzl", "assert_program_produces_stdout")

filegroup(
    name = "ts_sources",
    srcs = [
        "a.ts",
        "b.ts",
    ],
)

# As the test fixture, produce a directory of js files
tsc(
    name = "build",
    args = [
        "$(execpaths :ts_sources)",
        "--outDir",
        "$(@D)",
    ],
    data = [
        ":ts_sources",
        "@npm//@types/node",
    ],
    output_dir = True,
)

#############
# Test Case 1
# An pkg_npm can be an entry_point, using the standard npm semantics.
# First, it needs to declare a "main" field in the package.json ...
write_file(
    name = "write_package_json",
    out = "package.json",
    content = [json.encode({
        "main": "build/a.js",
    })],
)

# ... then declare the package ...
pkg_npm(
    name = "package",
    deps = [
        "build",
        "package.json",
    ],
)

# ... and finally run the program with the package as the entry_point.
nodejs_binary(
    name = "run_a",
    data = ["package"],
    entry_point = "package",
)

# Now just assert that running that program produces the expected stdout
assert_program_produces_stdout(
    name = "test_a",
    stdout = ["running entry point A"],
    # This requires runfiles
    tags = ["no-bazelci-windows"],
    tool = "run_a",
)

#############
# Test Case 2
# Without the pkg_npm, we should still be able to run the program.
# But we need an adapter rule that gives us the equivalent of the "main" field

directory_file_path(
    name = "entry_point_b",
    directory = "build",
    path = "b.js",
)

nodejs_binary(
    name = "run_b",
    data = ["build"],
    entry_point = "entry_point_b",
)

# Now just assert that running that program produces the expected stdout
assert_program_produces_stdout(
    name = "test_b",
    stdout = ["running entry point B"],
    tool = "run_b",
)

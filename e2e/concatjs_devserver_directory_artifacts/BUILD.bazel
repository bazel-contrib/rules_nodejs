# Copyright 2017 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@build_bazel_rules_nodejs//:index.bzl", "js_library")
load("@build_bazel_rules_nodejs//internal/npm_install:npm_umd_bundle.bzl", "npm_umd_bundle")
load("@npm//@bazel/concatjs:index.bzl", "concatjs_devserver")
load("@npm//@bazel/protractor:index.bzl", "protractor_web_test_suite")
load("@npm//@bazel/typescript:index.bzl", "ts_project")

exports_files([
    "red-body-style.css",
    "tsconfig.json",
    "protractor.on-prepare.js",
])

ts_project(
    name = "compile",
    srcs = [
        "app.ts",
        "app_e2e-spec.ts",
    ],
    declaration = True,
    tsconfig = ":tsconfig.json",
    validate = False,
    deps = [
        "@npm//@types",
        "@npm//date-fns",
        "@npm//protractor",
        "@npm//rxjs",
        "@npm//typeorm",
    ],
)

js_library(
    name = "lib",
    named_module_srcs = [":compile"],
    deps = [":compile"],
)

# typeorm is a special case for npm_umd_bundle as we need to excluded
# the `react-native-sqlite-storage` dynamic require from the umd bundle
npm_umd_bundle(
    name = "typeorm_umd",
    package_name = "typeorm",
    entry_point = {"@npm//:node_modules/typeorm": "browser/index.js"},
    excluded = ["react-native-sqlite-storage"],
    package = "@npm//typeorm",
)

concatjs_devserver(
    name = "devserver",
    entry_module = "concatjs_devserver_directory_artifacts/app",
    scripts = [
        "@npm//date-fns:date-fns.umd.js",
        "@npm//rxjs:rxjs.umd.js",
        ":typeorm.umd.js",
    ],
    # We'll collect all the devmode JS sources from these TypeScript libraries
    deps = [":lib"],
)

protractor_web_test_suite(
    name = "devserver_test",
    on_prepare = ":protractor.on-prepare.js",
    protractor_entry_point = {"@npm//:node_modules/protractor": "bin/protractor"},
    server = ":devserver",
    deps = [":lib"],
)

# Just a dummy test so that we have a test target for //... on certain bazelci platforms with bazel_integration_test
sh_test(
    name = "dummy_test",
    srcs = ["dummy_test.sh"],
)

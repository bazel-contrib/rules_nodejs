load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load(":defs.bzl", "my_nodejs")

# Trivial test fixture: a nodejs program that writes to a file
write_file(
    name = "js",
    out = "some.js",
    content = ["require('fs').writeFileSync(process.argv[2], 'stuff')"],
)

# This technique can be used to directly grab a node binary as a label, however it has the
# downside that analysis phase on this select() statement will cause an eager fetch of all
# the platforms and therefore download a bunch of node binaries.
# This is what toolchains solves, so we don't recommend doing this.
# alias(
#     name = "node_bin",
#     actual = select({
#         "@bazel_tools//src/conditions:darwin_arm64": "@node16_darwin_arm64//:node_bin",
#         "@bazel_tools//src/conditions:darwin_x86_64": "@node16_darwin_amd64//:node_bin",
#         "@bazel_tools//src/conditions:linux_aarch64": "@node16_linux_arm64//:node_bin",
#         "@bazel_tools//src/conditions:linux_s390x": "@node16_linux_s390x//:node_bin",
#         "@bazel_tools//src/conditions:linux_x86_64": "@node16_linux_amd64//:node_bin",
#         "@bazel_tools//src/conditions:linux_ppc64le": "@node16_linux_ppc64le//:node_bin",
#         "@bazel_tools//src/conditions:windows": "@node16_windows_amd64//:node_bin",
#         "//conditions:default": "@node16_linux_amd64//:node_bin",
#     }),
# )
# genrule(
#     name = "use_node_bin",
#     srcs = ["some.js"],
#     outs = ["thing1"],
#     cmd = "$(execpath :node_bin) $(execpath some.js) $@",
#     tools = [":node_bin"],
# )

# In theory, you can use the node toolchain together with a genrule().
# However the genrule implementation doesn't perform toolchain resolution.
# See this comment from Jay Conrod about a similar question for rules_go
# https://github.com/bazelbuild/rules_go/issues/2255#issuecomment-545478712
# That means you must resolve the toolchain yourself, with a select()
# and that falls down the same deoptimization described above:
# it will eager-fetch node for all platforms.
# So instead we recommend always writing a custom rule to access the node binary.
# alias(
#     name = "node_toolchain",
#     actual = select({
#         "@bazel_tools//src/conditions:darwin_arm64": "@node16_darwin_arm64//:node_toolchain",
#         "@bazel_tools//src/conditions:darwin_x86_64": "@node16_darwin_amd64//:node_toolchain",
#         "@bazel_tools//src/conditions:linux_aarch64": "@node16_linux_arm64//:node_toolchain",
#         "@bazel_tools//src/conditions:linux_s390x": "@node16_linux_s390x//:node_toolchain",
#         "@bazel_tools//src/conditions:linux_x86_64": "@node16_linux_amd64//:node_toolchain",
#         "@bazel_tools//src/conditions:linux_ppc64le": "@node16_linux_ppc64le//:node_toolchain",
#         "@bazel_tools//src/conditions:windows": "@node16_windows_amd64//:node_toolchain",
#         "//conditions:default": "@node16_linux_amd64//:node_toolchain",
#     }),
# )
# genrule(
#     name = "use_node_toolchain",
#     srcs = ["some.js"],
#     outs = ["thing2"],
#     cmd = "$(NODE_PATH) $(execpath some.js) $@",
#     toolchains = [":node_toolchain"],
#     # It will also fail to include the files from the node_toolchain, so you're
#     # forced to repeat the label of the node binary as an explicit input.
#     tools = ["@node16_host//:node_bin"],
# )

# Here, my_nodejs is a fake for something like nodejs_binary or
# some other custom rule that runs node.
my_nodejs(
    name = "run",
    out = "thing",
    entry_point = "some.js",
)

# Assert that the node program wrote the file we expect
write_file(
    name = "write_expected",
    out = "expected",
    content = ["stuff"],
)

diff_test(
    name = "test",
    file1 = "expected",
    file2 = "thing",
)
# end Assert

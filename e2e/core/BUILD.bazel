load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load(":defs.bzl", "my_nodejs")

# Trivial test fixture: a nodejs program that writes to a file
write_file(
    name = "js",
    out = "some.js",
    content = ["require('fs').writeFileSync(process.argv[2], 'stuff')"],
)

write_file(
    name = "write_expected",
    out = "expected",
    content = ["stuff"],
)

# This technique can be used to directly grab a node binary as a label, however it has the
# downside that analysis phase on this select() statement will cause an eager fetch of all
# the platforms and therefore download a bunch of node binaries.
# This is what toolchains solves, so we don't recommend doing this.
# alias(
#     name = "node_bin",
#     actual = select({
#         "@bazel_tools//src/conditions:darwin_arm64": "@node16_darwin_arm64//:node_bin",
#         "@bazel_tools//src/conditions:darwin_x86_64": "@node16_darwin_amd64//:node_bin",
#         "@bazel_tools//src/conditions:linux_aarch64": "@node16_linux_arm64//:node_bin",
#         "@bazel_tools//src/conditions:linux_s390x": "@node16_linux_s390x//:node_bin",
#         "@bazel_tools//src/conditions:linux_x86_64": "@node16_linux_amd64//:node_bin",
#         "@bazel_tools//src/conditions:linux_ppc64le": "@node16_linux_ppc64le//:node_bin",
#         "@bazel_tools//src/conditions:windows": "@node16_windows_amd64//:node_bin",
#         "//conditions:default": "@node16_linux_amd64//:node_bin",
#     }),
# )
# genrule(
#     name = "use_node_bin",
#     srcs = ["some.js"],
#     outs = ["thing1"],
#     cmd = "$(execpath :node_bin) $(execpath some.js) $@",
#     tools = [":node_bin"],
# )

# You can use the node toolchain together with a genrule().
# This gives you complete control over starting the interpreter, but you also have to
# manually handle module resolution.
genrule(
    name = "use_node_toolchain",
    srcs = ["some.js"],
    outs = ["genrule_out"],
    cmd = "$(NODE_PATH) $(execpath some.js) $@",
    toolchains = ["@node16_toolchains//:resolved_toolchain"],
    tools = ["@node16_toolchains//:resolved_toolchain"],
)

diff_test(
    name = "test_genrule",
    file1 = "expected",
    file2 = "genrule_out",
)

# Here, my_nodejs is a fake for something like nodejs_binary or
# some other custom rule that runs node.
my_nodejs(
    name = "run",
    out = "thing",
    entry_point = "some.js",
)

# Assert that the node program wrote the file we expect
diff_test(
    name = "test_custom_rule",
    file1 = "expected",
    file2 = "thing",
)

# Generated by third_party/npm/generate_build_files.js
# DO NOT EDIT

# To regenerate all third_party npm dependencies and re-generate this BUILD file
# run /scripts/update_third_party_npm_deps.sh

# All rules in other repositories can use these targets
package(default_visibility = ["//visibility:public"])

licenses(["notice"])

load("@build_bazel_rules_nodejs//internal/npm_install:node_module_library.bzl", "node_module_library")

# Generated targets for npm package "buffer-from"
# {
#   "name": "buffer-from",
#   "version": "1.1.1",
#   "license": "MIT",
#   "repository": "LinusU/buffer-from",
#   "files": [
#     "index.js"
#   ],
#   "scripts": {
#     "test": "standard && node test"
#   },
#   "devDependencies": {
#     "standard": "^7.1.2"
#   },
#   "keywords": [
#     "buffer",
#     "buffer from"
#   ],
#   "_dir": "buffer-from",
#   "_name": "buffer-from",
#   "_isNested": false,
#   "_dependencies": [
#     "buffer-from"
#   ]
# }

_SOURCES = [
    ":LICENSE",
    ":index.js",
    ":package.json",
    ":readme.md",
]

node_module_library(
    name = "buffer-from__pkg",
    # buffer-from package contents (and contents of nested node_modules)
    srcs = [
        ":buffer-from__files",
    ],
)

# buffer-from__files target is used as dep for other __pkg targets to prevent
# circular dependencies errors
node_module_library(
    name = "buffer-from__files",
    srcs = _SOURCES,
)

filegroup(
    name = "buffer-from__contents",
    srcs = _SOURCES,
)

# buffer-from__sources target is used as dep for other __contents targets to prevent
# circular dependencies errors
filegroup(
    name = "buffer-from__sources",
    srcs = _SOURCES,
)

# buffer-from__package_contents target used for generating npm package
filegroup(
    name = "buffer-from__package_contents",
    srcs = glob(["**"]),
    visibility = ["//third_party/npm:__pkg__"],
)

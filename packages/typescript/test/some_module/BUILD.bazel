load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary")
load("//packages/typescript:index.bzl", "ts_library")
load("//packages/typescript/test/some_module:run_node_test.bzl", "ts_write_file")

# We compile this library with the module name "sm" to make it possible to
# use `import {} from 'sm';` both at type-check time (we include the mapping in
# the paths map in tsconfig) as well as runtime (we patch the nodejs module
# loader to discover the path in the runfiles).
ts_library(
    name = "some_module",
    srcs = ["index.ts"],
    module_name = "sm",
)

ts_library(
    name = "main",
    srcs = ["main.ts"],
    deps = [":some_module"],
)

nodejs_binary(
    name = "bin",
    data = [
        ":main",
        ":some_module",
    ],
    entry_point = ":main.ts",
)

sh_test(
    name = "module_load_test",
    srcs = ["module_load_test.sh"],
    data = [
        ":bin",
        "@build_bazel_rules_nodejs//third_party/github.com/bazelbuild/bazel/tools/bash/runfiles",
    ],
)

# ts_library for compiling the tool
ts_library(
    name = "writer",
    srcs = ["writer.ts"],
    deps = ["@npm//@types/node"],
)

# nodejs_binary for generating an executable for the tool :writer
nodejs_binary(
    name = "writer_bin",
    data = [
        ":writer",
    ],
    entry_point = ":writer.ts",
)

# custom rule using the executable above via run_node
# invoked via bazel build //packages/typescript/test/some_module:test
# as --nobazel_patch_module_resolver is added by default by run_node, the entry_point on the executable is resolved
# to the ts file - writer.ts
# this works for bazel run //packages/typescript/test/some_module:writer_bin as this will patch require and resolve the
# ts to js
ts_write_file(
    name = "test",
    content = "hello world",
)

# Copyright 2017 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_test")
load("@npm_node_patches//typescript:index.bzl", "tsc")
load("//packages/rollup:index.bzl", "rollup_bundle")
load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("@bazel_skylib//rules:write_file.bzl", "write_file")

package(default_visibility = ["//:__subpackages__"])

sources = glob(
    [
        "*.ts",
        "src/*.ts",
    ],
    exclude = ["**/*.d.ts"],
)

js = [s.replace(".ts", ".js") for s in sources]

tests = glob(
    ["test/**/*.ts"],
    exclude = ["**/*.d.ts"],
)

test_js = [t.replace(".ts", ".js") for t in tests]

tsc(
    name = "compile",
    # TODO: we ought to compile tests separately?
    outs = js + test_js,
    args = [
        "-p",
        "$(execpath tsconfig-bazel.json)",
        "--outDir",
        "$(RULEDIR)",
    ],
    data = sources + tests + [
        "tsconfig.json",
        "tsconfig-bazel.json",
        "@npm_node_patches//:node_modules",
    ],
)

# Like the generated mocha_test but we don't want to run the patches before testing the patches
nodejs_test(
    name = "unit_test",
    data = js + test_js + [
        "@npm_node_patches//:node_modules",
    ],
    entry_point = "@npm_node_patches//:node_modules/mocha/bin/mocha",
    tags = ["fix-windows"],
    templated_args = ["$$(rlocation $(rootpath %s))" % s for s in test_js] + [
        # TODO: passes locally on mac without this flag but fails on CircleCI
        "--bazel_patch_module_resolver",
        "--nobazel_node_patches",
    ],
)

rollup_bundle(
    name = "bundle",
    srcs = js,
    config_file = "rollup.config.js",
    entry_point = "register.js",
    format = "cjs",
    sourcemap = "false",
    deps = ["@npm//@rollup/plugin-commonjs"],
)

write_file(
    name = "update_gen",
    out = "update.sh",
    content = [
        "#!/bin/sh",
        "cd $BUILD_WORKSPACE_DIRECTORY",
        "cp -fv dist/bin/packages/node-patches/bundle.js nodejs/sandbox-patches.js",
    ],
)

sh_binary(
    name = "update",
    srcs = ["update.sh"],
    data = ["bundle"],
)

diff_test(
    name = "checked_in_bundle",
    failure_message = """To accept the new generated file, run:

        bazel run //packages/node-patches:update""",
    file1 = "bundle",
    file2 = "//nodejs:sandbox-patches.js",
)

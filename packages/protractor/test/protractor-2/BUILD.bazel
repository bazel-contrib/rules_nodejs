load("@npm//http-server:index.bzl", "http_server")
load("//packages/concatjs:index.bzl", "concatjs_devserver")
load("//packages/protractor:index.bzl", "protractor_web_test_suite")
load("//packages/rollup:index.bzl", "rollup_bundle")
load("//packages/terser:index.bzl", "terser_minified")
load("//packages/typescript:index.bzl", "ts_config", "ts_library")

ts_config(
    name = "tsconfig-test",
    src = "tsconfig-test.json",
    deps = [":tsconfig.json"],
)

ts_library(
    name = "app",
    srcs = ["app.ts"],
    tsconfig = ":tsconfig.json",
)

rollup_bundle(
    name = "bundle",
    entry_point = ":app.ts",
    deps = [":app"],
)

terser_minified(
    name = "bundle.min",
    src = ":bundle",
)

concatjs_devserver(
    name = "devserver",
    devserver = "@build_bazel_rules_typescript//devserver:devserver_bin",
    devserver_host = "@build_bazel_rules_typescript//devserver:devserver_bin",
    serving_path = "/bundle.min.js",
    static_files = ["index.html"],
    deps = [":app"],
)

http_server(
    name = "prodserver",
    data = [
        "index.html",
        ":bundle.min",
    ],
    # This repeats the default, but is here for coverage
    # to make sure the generated index.bzl handles it
    output_dir = False,
    templated_args = [package_name()],
)

ts_library(
    name = "ts_spec",
    testonly = True,
    srcs = ["test.spec.ts"],
    tsconfig = ":tsconfig-test",
    deps = [
        "@npm//@types/jasmine",
        "@npm//protractor",
    ],
)

protractor_web_test_suite(
    name = "prodserver_test",
    configuration = ":conf.js",
    on_prepare = ":on-prepare.js",
    server = ":prodserver",
    tags = [
        "fix-windows",  # http_server (and history_server) do not work on Windows
    ],
    deps = [
        ":ts_spec",
    ],
)

protractor_web_test_suite(
    name = "devserver_test",
    configuration = ":conf.js",
    on_prepare = ":on-prepare.js",
    server = ":devserver",
    deps = [
        ":ts_spec",
    ],
)

protractor_web_test_suite(
    name = "test_suite_with_configured_server",
    configuration = ":conf.js",
    on_prepare = ":on-prepare.js",
    server = select({
        "//conditions:default": ":devserver",
    }),
    deps = [":ts_spec"],
)

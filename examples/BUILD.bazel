# Copyright 2017 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load(":test.bzl", "example_integration_test")

example_integration_test(
    name = "examples_app",
    npm_packages = {
        "//packages/hide-bazel-files:npm_package": "@bazel/hide-bazel-files",
        "//packages/protractor:npm_package": "@bazel/protractor",
        "//packages/typescript:npm_package": "@bazel/typescript",
    },
)

example_integration_test(
    name = "examples_parcel",
    npm_packages = {
        "//packages/jasmine:npm_package": "@bazel/jasmine",
    },
)

example_integration_test(
    name = "examples_web_testing",
    npm_packages = {
        "//packages/karma:npm_package": "@bazel/karma",
        "//packages/typescript:npm_package": "@bazel/typescript",
    },
)

example_integration_test(
    name = "examples_webapp",
    npm_packages = {
        "//packages/protractor:npm_package": "@bazel/protractor",
    },
)

example_integration_test(
    name = "examples_nestjs",
    bazel_commands = [
        "build ...",
        # Test cross-platform build
        "build --platforms=@build_bazel_rules_nodejs//toolchains/node:linux_amd64 //src:docker",
    ],
    npm_packages = {
        "//packages/typescript:npm_package": "@bazel/typescript",
    },
    # Breaks on Windows with `rules_docker requires a python interpreter installed. Please set
    # BAZEL_PYTHON, or put it on your path.`
    tags = ["fix-windows"],
)

example_integration_test(
    name = "examples_protocol_buffers",
    npm_packages = {
        "//packages/hide-bazel-files:npm_package": "@bazel/hide-bazel-files",
        "//packages/karma:npm_package": "@bazel/karma",
        "//packages/protractor:npm_package": "@bazel/protractor",
        "//packages/typescript:npm_package": "@bazel/typescript",
    },
    # Runs out of memory on bazelci windows
    # TODO(gregmagolan): fix on bazelci windows
    tags = ["no-bazelci-windows"],
)

example_integration_test(
    name = "examples_user_managed_deps",
    # This test requires calling `bazel run @nodejs//:yarn` before `bazel test ...`
    bazel_commands = [
        "run @nodejs//:yarn",
        "test ...",
    ],
    # replace the following repositories with the generated archives
    repositories = {
        "//:release": "build_bazel_rules_nodejs",
        "@npm_bazel_jasmine//:release": "npm_bazel_jasmine",
    },
)

example_integration_test(
    name = "examples_vendored_node",
    npm_packages = {
        "//packages/jasmine:npm_package": "@bazel/jasmine",
    },
    # This example only works on linux as it downloads the linux node distribution
    # TODO(gregmagolan): make node_repositories acccept different archives for different platforms
    tags = ["manual"],
)

example_integration_test(
    name = "examples_vendored_node_and_yarn",
    npm_packages = {
        "//packages/jasmine:npm_package": "@bazel/jasmine",
    },
    # This example only works on linux as it downloads the linux node distribution
    # TODO(gregmagolan): make node_repositories acccept different archives for different platforms
    tags = ["manual"],
    workspace_files = "@examples_vendored_node//:all_files",
)

example_integration_test(
    name = "examples_worker",
    # There are no tests in this example
    bazel_commands = [
        # By default this will build with worker enabled
        "build //:do_work",
        # Build again without the worker
        "build --define=cache_bust=true --strategy=DoWork=standalone //:do_work",
    ],
    npm_packages = {"//packages/worker:npm_package": "@bazel/worker"},
)

load(":index.bzl", "ALL_EXAMPLES")

# Ensure that all e2e directories have a test target
# Otherwise it would be easy to add a new one, but not have a test registered for it
test_suite(
    name = "all_examples",
    tests = [":examples_%s" % t for t in ALL_EXAMPLES],
)

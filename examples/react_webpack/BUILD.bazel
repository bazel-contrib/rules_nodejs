load("@npm//http-server:index.bzl", "http_server")
load("@npm//sass:index.bzl", "sass")
load("@npm//webpack-cli:index.bzl", webpack = "webpack_cli")
load("@npm_bazel_typescript//:index.bzl", "ts_project")

sass(
    name = "styles",
    outs = ["styles.css"],
    args = [
        "$(execpath styles.scss)",
        "$(execpath styles.css)",
    ],
    data = ["styles.scss"],
)

ts_project(
    name = "tsconfig",
    srcs = [
        "index.tsx",
        "types.d.ts",
    ],
    # The tsconfig.json file doesn't enable "declaration" or "composite"
    # so tsc won't produce any .d.ts outputs. We need to tell Bazel not
    # to expect those outputs being produced.
    declaration = False,
    deps = [
        "@npm//@types",
        "@npm//csstype",
    ],
)

# If you don't want to write //:tsconfig as the label for the TypeScript compilation,
# use an alias like this, so you can write //:compile_ts instead.
alias(
    name = "compile_ts",
    actual = "tsconfig",
)

webpack(
    name = "bundle",
    outs = ["app.bundle.js"],
    args = [
        "$(execpath index.js)",
        "--config",
        "$(execpath webpack.config.js)",
        "-o",
        "$@",
    ],
    data = [
        "index.js",
        "styles.css",
        "webpack.config.js",
        "@npm//:node_modules",
    ],
)

# Note, on Windows you need `--enable_runfiles`
http_server(
    name = "server",
    data = [
        "app.bundle.js",
        "index.html",
    ],
    templated_args = ["."],
)

load("@build_bazel_rules_nodejs//:defs.bzl", "http_server", "rollup_bundle")
load("@build_bazel_rules_nodejs//internal/web_package:web_package.bzl", "web_package")
load("@npm_angular_bazel//:index.bzl", "ng_module")
load("@npm_bazel_typescript//:defs.bzl", "ts_devserver")

package(default_visibility = ["//visibility:public"])

ng_module(
    name = "src",
    srcs = glob(["*.ts"]),
    assets = [
        ":app.component.html",
        "//src/styles:main",
    ],
    deps = [
        "//src/hello-world",
        "//src/material",
        "@npm//@angular/core",
        "@npm//@angular/forms",
        "@npm//@angular/material",
        "@npm//@angular/platform-browser",
        "@npm//@angular/platform-browser-dynamic",
        "@npm//@types",
    ],
)

filegroup(
    name = "rxjs_umd_modules",
    srcs = [
        # do not sort
        "@npm//node_modules/rxjs:bundles/rxjs.umd.js",
        ":rxjs_shims.js",
    ],
)

ts_devserver(
    name = "devserver",
    # Serve these files but don't inject tags for them into the index file
    # This might be because we only want to lazy-load these scripts on-demand,
    # or because they aren't compatible with Require.js so we must use a runtime
    # loader to load them.
    data = [
        "//src/images:image_assets",
    ],
    # Start from the development version of the main
    entry_module = "examples_angular/src/main.dev",
    # <script> and <link> tags will be automatically injected into this index file
    index_html = "index.html",
    # These scripts will be included in the JS bundle after require.js
    # They should have only named UMD modules, or require.js will throw.
    scripts = [
        "@npm//node_modules/@angular/animations:bundles/animations.umd.js",
        "@npm//node_modules/@angular/animations:bundles/animations-browser.umd.js",
        "@npm//node_modules/@angular/forms:bundles/forms.umd.js",
        "@npm//node_modules/@angular/common:bundles/common.umd.js",
        "@npm//node_modules/@angular/common:bundles/common-http.umd.js",
        "@npm//node_modules/@angular/core:bundles/core.umd.js",
        "@npm//node_modules/@angular/platform-browser:bundles/platform-browser.umd.js",
        "@npm//node_modules/@angular/platform-browser:bundles/platform-browser-animations.umd.js",
        "@npm//node_modules/@angular/material:bundles/material-core.umd.js",
        "@npm//node_modules/@angular/material:bundles/material-button.umd.js",
        "@npm//node_modules/@angular/material:bundles/material-card.umd.js",
        "@npm//node_modules/@angular/material:bundles/material-form-field.umd.js",
        "@npm//node_modules/@angular/material:bundles/material-icon.umd.js",
        "@npm//node_modules/@angular/material:bundles/material-input.umd.js",
        "@npm//node_modules/@angular/material:bundles/material-list.umd.js",
        "@npm//node_modules/@angular/material:bundles/material-toolbar.umd.js",
        "@npm//node_modules/@angular/material:bundles/material-divider.umd.js",
        "@npm//node_modules/@angular/cdk:bundles/cdk-observers.umd.js",
        "@npm//node_modules/@angular/cdk:bundles/cdk-collections.umd.js",
        "@npm//node_modules/@angular/cdk:bundles/cdk-bidi.umd.js",
        "@npm//node_modules/@angular/cdk:bundles/cdk-text-field.umd.js",
        "@npm//node_modules/@angular/cdk:bundles/cdk-keycodes.umd.js",
        "@npm//node_modules/@angular/cdk:bundles/cdk-coercion.umd.js",
        "@npm//node_modules/@angular/cdk:bundles/cdk-platform.umd.js",
        "@npm//node_modules/@angular/cdk:bundles/cdk-a11y.umd.js",
        "@npm//node_modules/tslib:tslib.js",
        ":rxjs_umd_modules",
        "@npm//node_modules/@angular/material:icon/typings/index.ngfactory.js",
        "@npm//node_modules/@angular/material:card/typings/index.ngfactory.js",
        "@npm//node_modules/@angular/material:toolbar/typings/index.ngfactory.js",
        "@npm//node_modules/@angular/material:form-field/typings/index.ngfactory.js",
    ],
    # Serve these files in addition to the JavaScript bundle
    # The corresponding <script> or <link> tags will be injected into the index_html
    static_files = [
        "//src/styles:main.css",
        "@npm//node_modules/@angular/material:prebuilt-themes/deeppurple-amber.css",
        # We load zone.js outside the bundle. That's because it's a "pollyfill"
        # which speculates that such features might be available in a browser.
        # Also it's tricky to configure dead code elimination to understand that
        # zone.js is used, given that we don't have any import statement that
        # imports from it.
        "@npm//node_modules/zone.js:dist/zone.min.js",
    ],
    # Tell Bazel to build the sources first
    deps = ["//src"],
)

rollup_bundle(
    name = "bundle",
    entry_point = "src/main.prod",
    deps = [
        "//src",
        "@npm//@angular/common",
        "@npm//@angular/core",
        "@npm//@angular/material",
        "@npm//@angular/platform-browser",
        "@npm//rxjs",
    ],
)

web_package(
    name = "prodapp",
    # do not sort
    assets = [
        "@npm//node_modules/@angular/material:prebuilt-themes/deeppurple-amber.css",
        "@npm//node_modules/zone.js:dist/zone.min.js",
        "//src/styles:main",
        ":bundle.min.js",
    ],
    data = [
        ":bundle",
        "//src/images:image_assets",
    ],
    # <script> and <link> tags will be automatically injected into this index.
    index_html = "index.html",
)

http_server(
    name = "prodserver",
    data = [":prodapp"],
    templated_args = ["src/prodapp"],
)

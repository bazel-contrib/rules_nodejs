load("@build_bazel_rules_nodejs//:index.bzl", "js_library", "nodejs_binary", "nodejs_test")

# This is "user-managed" dependencies - Bazel knows nothing about our package
# manager. We assume that developers will install the `node_modules` directory
# themselves and keep it up-to-date. This rule simply exposes files in the
# node_modules directory to Bazel using js_library with package_name set to
# "node_modules" so it can read them as inputs to processes it spawns.
js_library(
    name = "node_modules",
    # Special value to provide ExternalNpmPackageInfo which is used by downstream
    # rules that use these npm dependencies
    package_name = "$node_modules$",
    srcs = glob(
        include = [
            "node_modules/**/*.js",
            "node_modules/**/*.d.ts",
            "node_modules/**/*.json",
            "node_modules/.bin/*",
        ],
        exclude = [
            # Files under test & docs may contain file names that
            # are not legal Bazel labels (e.g.,
            # node_modules/ecstatic/test/public/中文/檔案.html)
            "node_modules/**/test/**",
            "node_modules/**/docs/**",
            # Files with spaces in the name are not legal Bazel labels
            "node_modules/**/* */**",
            "node_modules/**/* *",
        ],
    ),
)

nodejs_binary(
    name = "example",
    # Every execution of the program gets these arguments added
    args = ["--node_options=--expose-gc"],
    data = [
        "index.js",
        "//:node_modules",
    ],
    entry_point = ":index.js",
)

nodejs_test(
    name = "test",
    data = [
        "decrement.js",
        "index.js",
        ":node_modules",
    ],
    entry_point = "index.spec.js",
)
